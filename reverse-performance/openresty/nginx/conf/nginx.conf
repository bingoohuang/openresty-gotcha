
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    keepalive_timeout 65;

    upstream dynamic {
        server 0.0.0.1;   # just an invalid address as a place holder
        balancer_by_lua_file conf/dynamic_balancer.lua;

        # https://groups.google.com/g/openresty-en/c/6b9HgG_0xas
        # One keepalive directive, one connection pool (per worker). Different
        # peers share the same pool without conflicts (since only matching
        # connections in the pool can be reused, others are skipped).
        keepalive 1000; # must be behind the balancer_by_lua_block.
    }

    server { # 使用ngx.location.capture调用.
        listen 20006;
        location ~ ^http {
            internal;
            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Origin "";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_redirect off;
            proxy_pass $uri$is_args$args;
        }

        location / {
            content_by_lua_block {
                (require "resty.capture").request( "http://vsm/vsm/SDF_OpenDevice")
           }
        }
    }

    server { # 调用upstream + balancer，设置连接池1000.
        listen 20005;
        location / {
            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Origin "";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_redirect off;
            proxy_pass http://dynamic;
        }
    }

    server { # 使用ngx.location.capture调用.
        listen 20004;
        location ~ ^http {
            internal;
            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Origin "";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_redirect off;
            proxy_pass $uri$is_args$args;
        }
        location / {
            content_by_lua_block {
                (require "resty.capture").request(
                    "http://127.0.0.1:8812/vsm/SDF_OpenDevice")
            }
        }
    }
    upstream vsm2 { server 127.0.0.1:8812; }
    server { # 调用upstream，没有设置连接池.
        listen 20003;
        location / {
            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Origin "";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_redirect off;
            proxy_pass http://vsm2/vsm/SDF_OpenDevice;
        }
    }
    upstream vsm { keepalive 1000; server 127.0.0.1:8812; }
    server { # 调用upstream，并且设置连接池1000.
        listen 20002;
        location / {
            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Origin "";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_redirect off;
            proxy_pass http://vsm/vsm/SDF_OpenDevice;
        }
    }
    server { # 包装resty.http的调用，并且设置连接池1000.
        listen 20001;
        location / {
            content_by_lua_block {
                (require "resty.httpc").request(
                    "http://127.0.0.1:8812/vsm/SDF_OpenDevice", {
                    keepalive_pool = 1000,
                })
            }
        }
    }
    server { # 直接演示resty.http, 并且设置连接池1000.
        listen 20000;
        location / { content_by_lua_file conf/httpc_demo.lua; }
    }
}
